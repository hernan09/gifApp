[{"C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\index.js":"1","C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\App.js":"2","C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\GiffExpertApp\\default.jsx":"3","C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\AddCategory\\default.jsx":"4","C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\GiffGreed\\default.jsx":"5","C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\helper.js":"6","C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\hooks\\useFetchGif.js":"7"},{"size":219,"mtime":1641650852412,"results":"8","hashOfConfig":"9"},{"size":400,"mtime":1622911047928,"results":"10","hashOfConfig":"9"},{"size":720,"mtime":1609716255808,"results":"11","hashOfConfig":"9"},{"size":1861,"mtime":1609817938247,"results":"12","hashOfConfig":"9"},{"size":1225,"mtime":1609816846592,"results":"13","hashOfConfig":"9"},{"size":459,"mtime":1609729710304,"results":"14","hashOfConfig":"9"},{"size":473,"mtime":1609604687762,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2ibfmv",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\index.js",[],"C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\App.js",[],["34","35"],"C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\GiffExpertApp\\default.jsx",["36"],"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AddCategory from '../AddCategory/default';\r\nimport GiiffGridd from '../GiffGreed/default';\r\nimport './__index.css';\r\n\r\nconst GiffExpertApp = (props) => {\r\n  const [categorias, setCategorias] = useState(['']);\r\n\r\n  return (\r\n    <>\r\n      <AddCategory setCategorias={setCategorias}></AddCategory>\r\n      <ul>\r\n        {categorias.map((element) => {\r\n          return (\r\n            <div className=\"content-cards\">\r\n              <GiiffGridd key={element} categoria={element}></GiiffGridd>\r\n            </div>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nGiffExpertApp.propTypes = {};\r\n\r\nexport default GiffExpertApp;\r\n","C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\AddCategory\\default.jsx",["37","38"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Particles from 'react-particles-js';\r\nimport './__index.css';\r\n\r\nconst AddCategory = ({ setCategorias }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [displayParticles, setdisplayParticles] = useState('none');\r\n\r\n  useEffect(() => {\r\n    console.log('probando');\r\n    if (window.innerWidth >= 450) {\r\n      console.log('menor a 450', displayParticles);\r\n      setdisplayParticles(displayParticles == 'block');\r\n    }\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategorias(() => [inputValue]);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container__search__header\">\r\n      <div className={`visibility__${displayParticles}`}>\r\n        <Particles\r\n          width=\"100%\"\r\n          height=\"100vh\"\r\n          params={{\r\n            particles: {\r\n              line_linked: {\r\n                shadow: {\r\n                  enable: true,\r\n                  color: '#3CA9D1',\r\n                  blur: 5,\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"searchBox\">\r\n          <input\r\n            className=\"searchInput\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            type=\"text\"\r\n            name=\"\"\r\n            placeholder=\"Search\"\r\n          />\r\n          <button className=\"searchButton\" href=\"#\">\r\n            <i className=\"material-icons\">search</i>\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nAddCategory.propTypes = {\r\n  setCategorias: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\GiffGreed\\default.jsx",["39","40"],"import React from 'react';\r\nimport useFetchhGif from '../hooks/useFetchGif';\r\nimport { WhatsappIcon, FacebookIcon, TwitterIcon } from 'react-share';\r\n\r\nimport './__index.css';\r\n\r\nconst GiffGridd = ({ categoria }) => {\r\n  const { loading, data: images } = useFetchhGif(categoria);\r\n\r\n  return (\r\n    <>\r\n      {loading && <div className=\"loading__\">Loading..</div>}\r\n\r\n      {images.map((img) => {\r\n        return (\r\n          <div className=\"containerr\">\r\n            <div className=\"card\">\r\n              <div className=\"face face1\">\r\n                <div className=\"content\">\r\n                  <img src={img.url} />\r\n                </div>\r\n              </div>\r\n              <div className=\"face face2\">\r\n                <div className=\"content\">\r\n                  <p>{img.title}</p>\r\n                  <a href=\"#\">\r\n                    <FacebookIcon size={32} url={img.url}></FacebookIcon>\r\n                    <WhatsappIcon size={32} url={img.url}></WhatsappIcon>\r\n                    <TwitterIcon size={32} url={img.url}></TwitterIcon>\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GiffGridd;\r\n","C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\helper.js",[],"C:\\Users\\Hernan\\Desktop\\giffapp\\my-app\\src\\Components\\hooks\\useFetchGif.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":17},{"ruleId":"49","severity":1,"message":"50","line":14,"column":44,"nodeType":"51","messageId":"52","endLine":14,"endColumn":46},{"ruleId":"53","severity":1,"message":"54","line":16,"column":6,"nodeType":"55","endLine":16,"endColumn":8,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":20,"column":19,"nodeType":"59","endLine":20,"endColumn":40},{"ruleId":"60","severity":1,"message":"61","line":26,"column":19,"nodeType":"59","endLine":26,"endColumn":31},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'displayParticles'. Either include it or remove the dependency array. You can also do a functional update 'setdisplayParticles(d => ...)' if you only need 'displayParticles' in the 'setdisplayParticles' call.","ArrayExpression",["64"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},"Update the dependencies array to be: [displayParticles]",{"range":"67","text":"68"},[542,544],"[displayParticles]"]